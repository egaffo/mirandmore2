#!/usr/bin/env python

'''This script converts a pre_summary.blob file (as those generated by mir_discretizer.py) '''
'''into an annotation file formatted as the mature-table.txt. '''

import os
import sys
import rna
import argparse
import pickle
import itertools
from collections import defaultdict

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-p', '--pre', dest = "pre", required = True,
                        help = 'A pre_summary.blob as generated by mir_discretizer.py')
    parser.add_argument('-m', '--mature-table', dest = "mature_table", required = True,
                        help = "A mature-table.txt of extended hairpins were "\
                               "known miRs' coordinates (relative to their "\
                               "precursor) are reported")
    parser.add_argument('-o', '--outfile', dest = 'outfile', required = False,
                        default = '-', help = 'The output file. Default: stdout')
   
    args = parser.parse_args()

    with open(args.pre) as pre:
        pre_summary_blob = pickle.load(pre)

    known_matures_tab = defaultdict(dict)
    known_matures_lines = []
    with open(args.mature_table) as known_matures:
        ## the build_pre_to_mature_table() function does not record
        ## chromosome, strand and length infos. Must rewrite the parsing.
        #known_matures_tab = build_pre_to_mature_table(known_matures)
        for line in known_matures:
            chrom, pre, name, strand, start, end, pre_len = line.strip().split("\t")
            name = name.strip()

            if not pre in known_matures_tab.keys():
                known_matures_tab[pre]['chrom'] = chrom
                known_matures_tab[pre]['strand'] = strand
                known_matures_tab[pre]['length'] = pre_len
                known_matures_tab[pre]['matures'] = defaultdict(dict)

            if name in known_matures_tab[pre]['matures'].keys():
                sys.stderr.write("WARNING: " + name + \
                                 " " + " ".join([chrom, start, end]) +\
                                 " is duplicate of " + pre + \
                                 " " + name + " " + \
                                 " ".join(known_matures_tab[pre]['matures'][name].values()) + \
                                 " and will be ignored\n")
            else:
                known_matures_tab[pre]['matures'][name] = defaultdict(dict)
                known_matures_tab[pre]['matures'][name]['start'] = int(start)
                known_matures_tab[pre]['matures'][name]['end'] = int(end)

    with open(args.outfile, "w") as f:
        ## check new small RNAs and append them to the output file
        for pre, presummary in pre_summary_blob.items():
            ## report chromosome name, strand and pre_length
            ## from (extended hairpins) mature-table.txt
            pre = pre.strip()
            chrom = known_matures_tab[pre]['chrom']
            strand = known_matures_tab[pre]['strand']
            pre_length = known_matures_tab[pre]['length']

            for attr in ["five_prime_mor", "five_prime_mir", "loop",
                         "three_prime_mir", "three_prime_mor"]:
                obj = getattr(presummary, attr)
                if obj:
                    name = obj.name.strip()
                    start = int(obj.start)
                    end = int(obj.end)

                    for mature_name in known_matures_tab[pre]['matures'].keys():
                        ## check renaming of miRs:
                        ## check plain name and check wether -3p/-5p
                        ## was appended to the miR name,
                        ## i.e. if the 'contracted' miR names
                        ## (say 'without 3p/5p postfix'), which for
                        ## some miRs is the one reported in the
                        ## known annotation, correspond.
                        ## In such case, output the knwon miR
                        ## coordinates but with the postfixed name.
                        ## Otherwise, the 'contracted' name refers to
                        ## the opposite the sister miR, so
                        ## the new miR coordinates have to be output.
                        if name == mature_name or \
                           name in [mature_name + "-5p", mature_name + "-3p"]:
                            known_start = known_matures_tab[pre]['matures'][mature_name]['start']
                            known_end = known_matures_tab[pre]['matures'][mature_name]['end']
                            ## check overlap: 
                            ## to assure a robust check, 
                            ## require at least half the known miR length overlap
                            ## prevent error given f.i. by hsa-miR-451a new sister
                            if (min(end, known_end) - max(start, known_start)) > (known_end - known_start)/2:
                                # the overlap could also be checked as
                                #if start < known_end and end > known_start:
                                ## replace with known miR coordinates
                                start = known_start
                                end = known_end

                    items = [chrom, pre, name, strand,
                             str(start), str(end), pre_length]

                    f.write("\t".join(items) + "\n")


if __name__ == '__main__':
    main()
